opa_policy: |
  package user.metadata

  # ... (previous rules remain) ...

  # Get team permissions
  team_permissions = permissions {
      input.team_id != ""
      permissions := metadata.team_permissions[input.team_id]
  }

  # Full user context combining category and permissions
  user_context = context {
      context := {
          "category": category_metadata,
          "permissions": team_permissions,
          "organization": metadata.context.organization_id,
          "region": metadata.context.deployment_region
      }
  }


# ak_tiered_model_exec.yaml.txt
claims:
  # ... (your existing claims section remains unchanged) ...

metadata:
  # ... (your existing metadata remains unchanged until the end) ...

# Embedded OPA Policy Section
opa_policy: |
  package user.metadata

  # Default output if no category matches
  default category_metadata = {"tier": 0, "destURL": "debug/request-info?user_category=default"}

  # Find matching category for user groups
  category_metadata = metadata {
      some category
      input.groups_set[_] == metadata.categories[category].groups[_]
      metadata := {
          "tier": metadata.categories[category].tier,
          "destURL": metadata.categories[category].destURL,
          "category": category
      }
  }

  # Helper rule to convert groups list to a set for easier comparison
  groups_set[group] {
      group := input.groups[_]
  }



#!/bin/bash

set -e

SCRIPT_NAME="script"
BASE_DIR="/workspace/envs"

usage() {
cat << EOF
Usage: $SCRIPT_NAME [OPTIONS]

Creates a Python virtual environment in $BASE_DIR and registers it as a Jupyter kernel.

Options:
  --pvt [VENV_NAME]   Create a Python virtual environment named VENV_NAME.
                      If VENV_NAME is not provided, you will be prompted.
  -h, --help          Show this help message and exit.

Examples:
  $SCRIPT_NAME --pvt myenv
  $SCRIPT_NAME --pvt
  $SCRIPT_NAME --help

EOF
}

# Show help if no args or help flag
if [[ $# -eq 0 ]] || [[ "$1" == "-h" || "$1" == "--help" ]]; then
    usage
    exit 0
fi

# Handle --pvt argument
if [[ "$1" == "--pvt" ]]; then
    if [[ -z "$2" ]]; then
        read -p "Enter the name of the Python virtual environment: " VENV_NAME
        if [ -z "$VENV_NAME" ]; then
            echo "Virtual environment name cannot be empty."
            exit 1
        fi
    else
        VENV_NAME="$2"
    fi
else
    usage
    exit 1
fi

VENV_PATH="$BASE_DIR/$VENV_NAME"

# Create base directory if it doesn't exist
mkdir -p "$BASE_DIR"

# Check if virtual environment already exists
if [ -d "$VENV_PATH" ]; then
  echo "Virtual environment '$VENV_NAME' already exists at $VENV_PATH"
  exit 1
fi

# Create virtual environment
if ! python3 -m venv "$VENV_PATH"; then
  echo "Failed to create virtual environment."
  exit 1
fi

echo "Virtual environment created at: $VENV_PATH"

# Activate the virtual environment
# shellcheck source=/dev/null
source "$VENV_PATH/bin/activate"

# Upgrade pip and install ipykernel
echo "Installing pip and ipykernel..."
pip install --upgrade pip >/dev/null
pip install ipykernel >/dev/null

# Add Jupyter kernel with same name
if python -m ipykernel install --user --name="$VENV_NAME" --display-name="Python ($VENV_NAME)" >/dev/null; then
  echo "Kernel 'Python ($VENV_NAME)' added successfully."
else
  echo "Failed to create Jupyter kernel."
  deactivate
  exit 1
fi

# Deactivate virtual environment
deactivate

echo
echo "To activate this environment manually later, run:"
echo "   source \"$VENV_PATH/bin/activate\""
