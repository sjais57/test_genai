import os
import re
from datetime import timedelta, datetime
from flask import Flask, jsonify, request, make_response, render_template, send_from_directory
from flask_jwt_extended import (
    JWTManager, create_access_token, create_refresh_token,
    jwt_required, get_jwt_identity, decode_token, get_jwt
)
from dotenv import load_dotenv
import logging
import pathlib
import yaml
import uuid
import glob
from flask_swagger_ui import get_swaggerui_blueprint
from swagger_config import get_swagger_dict, get_swagger_json, get_swagger_yaml

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

# Import authentication methods
from auth.file_auth import authenticate_file
from auth.ldap_auth import authenticate_ldap, LDAP_AVAILABLE
from utils.api_key import get_additional_claims, BASE_API_KEY_FILE

# GES Integration
try:
    from ges_entitylements.security import EntitlementsService
    GES_AVAILABLE = True
    logger.info("GES integration available")
except ImportError:
    GES_AVAILABLE = False
    logger.warning("GES integration not available - install ges_entitylements package")

# Import GES integration functions
try:
    from claims.ges_integration import ges_manager, validate_namespace_membership
    GES_INTEGRATION_AVAILABLE = True
except ImportError:
    GES_INTEGRATION_AVAILABLE = False
    logger.warning("GES integration modules not available")

# Ensure the templates directory exists
templates_dir = pathlib.Path(__file__).parent / 'templates'
templates_dir.mkdir(exist_ok=True)

# Initialize Flask app
app = Flask(__name__, template_folder=str(templates_dir))

# Configure Swagger UI
SWAGGER_URL = '/dspai-docs'
API_URL = '/swagger.json'

swaggerui_blueprint = get_swaggerui_blueprint(
    SWAGGER_URL,
    API_URL,
    config={
        'app_name': "JWT Auth API with GES Integration",
        'deepLinking': True,
        'defaultModelsExpandDepth': 2,
        'defaultModelExpandDepth': 2,
    }
)

app.register_blueprint(swaggerui_blueprint, url_prefix=SWAGGER_URL)

@app.route('/swagger.json')
def swagger_json():
    return get_swagger_json()

@app.route('/swagger.yaml')
def swagger_yaml():
    return get_swagger_yaml()

# Configure Flask-JWT-Extended
app.config["JWT_SECRET_KEY"] = os.getenv("JWT_SECRET_KEY", "dev-secret-key")
app.config["JWT_ACCESS_TOKEN_EXPIRES"] = timedelta(hours=1)
app.config["JWT_REFRESH_TOKEN_EXPIRES"] = timedelta(days=30)

# Authentication method
AUTH_METHOD = os.getenv("AUTH_METHOD", "file")

# GES Configuration
GES_ENABLED = os.getenv("GES_ENABLED", "false").lower() == "true"
GES_HOSTNAME = os.getenv("GES_HOSTNAME")
GES_PORT = int(os.getenv("GES_PORT", "8080"))
GES_NAMESPACE = os.getenv("GES_NAMESPACE", "default")
GES_CLIENT_ID = os.getenv("GES_CLIENT_ID")
GES_CLIENT_KEY = os.getenv("GES_CLIENT_KEY")

# Whether to always include base API key claims
ALWAYS_USE_BASE_CLAIMS = os.getenv("ALWAYS_USE_BASE_CLAIMS", "true").lower() == "true"

# Check if LDAP is requested but not available
if AUTH_METHOD == "ldap" and not LDAP_AVAILABLE:
    logger.warning("LDAP authentication method selected but python-ldap is not installed.")
    logger.warning("Falling back to file-based authentication.")
    AUTH_METHOD = "file"

jwt = JWTManager(app)

@app.route('/')
def index():
    return render_template('index.html')

def extract_group_cn(groups):
    """
    Extract group common names from LDAP group data
    """
    result = []
    for g in (groups or []):
        if isinstance(g, dict):
            cn = g.get('cn') or g.get('name') or g.get('uid') or ''
            if cn:
                result.append(cn.lower())
        elif isinstance(g, str):
            m = re.search(r'cn=([^,]+)', g, flags=re.I)
            result.append((m.group(1) if m else g).lower())
    seen, ordered = set(), []
    for n in result:
        if n not in seen:
            seen.add(n)
            ordered.append(n)
    return ordered

def get_ges_roles_for_namespace(username: str, namespace: str = None) -> list:
    """
    Get roles from GES service for a user in specific namespace
    
    Args:
        username: The username to get roles for
        namespace: Specific namespace (optional)
        
    Returns:
        List of roles from GES
    """
    if not GES_ENABLED or not GES_AVAILABLE:
        logger.debug("GES not enabled or service not available")
        return []
    
    try:
        if not hasattr(app, 'ges_service') or app.ges_service is None:
            # Initialize GES service if not already done
            if all([GES_HOSTNAME, GES_CLIENT_ID, GES_CLIENT_KEY]):
                app.ges_service = EntitlementsService(
                    hostname=GES_HOSTNAME,
                    port=GES_PORT,
                    namespace=GES_NAMESPACE,
                    client_id=GES_CLIENT_ID,
                    client_key=GES_CLIENT_KEY
                )
                logger.info("GES service initialized successfully")
            else:
                logger.warning("GES configuration incomplete")
                return []
        
        # Use specific namespace if provided, otherwise use default
        target_namespace = namespace if namespace else GES_NAMESPACE
        
        # Get roles for user
        roles = app.ges_service.get_roles(username)
        logger.info(f"Retrieved GES roles for {username} in namespace {target_namespace}: {roles}")
        return roles
    except Exception as e:
        logger.error(f"Error getting GES roles for {username}: {str(e)}")
        return []

def check_pre_validation_with_ges(api_key: str, normalized_groups: list, username: str) -> dict:
    """
    Enhanced pre-validation with GES namespace support
    
    Args:
        api_key: The API key to validate
        normalized_groups: User's normalized groups
        username: The username
        
    Returns:
        Dict with validation result
    """
    try:
        api_keys_dir = os.getenv("API_KEYS_DIR", "config/api_keys")
        api_key_file = os.path.join(api_keys_dir, f"{api_key}.yaml")
        
        if not os.path.exists(api_key_file):
            return {
                "valid": False,
                "message": "Invalid API key"
            }
        
        with open(api_key_file, 'r') as f:
            api_key_config = yaml.safe_load(f)
        
        # Check for namespace-based validation
        required_namespace = api_key_config.get('claims', {}).get('static', {}).get('ges_namespace')
        required_group = api_key_config.get('pre_validation_check')
        
        # If API key requires a specific namespace, validate namespace access
        if required_namespace and GES_INTEGRATION_AVAILABLE:
            namespace_validation = validate_namespace_membership(username, required_namespace)
            
            if not namespace_validation.get("valid", False):
                return {
                    "valid": False,
                    "message": namespace_validation.get("message", f"Namespace access denied for {required_namespace}"),
                    "required_namespace": required_namespace,
                    "validation_type": "namespace"
                }
            
            logger.info(f"User {username} has access to required namespace: {required_namespace}")
        
        # Continue with group-based validation if required
        if not required_group:
            return {
                "valid": True,
                "message": "No pre-validation required",
                "ges_namespace": required_namespace,
                "validation_type": "none"
            }
        
        required_group_normalized = required_group.lower()
        user_has_access = required_group_normalized in [group.lower() for group in normalized_groups]
        
        if user_has_access:
            return {
                "valid": True,
                "message": f"User has access to required group: {required_group}",
                "required_group": required_group,
                "ges_namespace": required_namespace,
                "validation_type": "group"
            }
        else:
            return {
                "valid": False,
                "message": f"User does not have access to required group: {required_group}",
                "required_group": required_group,
                "user_groups": normalized_groups,
                "ges_namespace": required_namespace,
                "validation_type": "group"
            }
            
    except Exception as e:
        logger.error(f"Error during GES pre-validation check: {str(e)}")
        return {
            "valid": False,
            "message": f"Error during validation: {str(e)}"
        }

@app.route('/token', methods=['POST'])
def login():
    if not request.is_json:
        return jsonify({"error": "Missing JSON in request"}), 400

    username = request.json.get('username', None)
    password = request.json.get('password', None)
    api_key = request.json.get('api_key', None)
    custom_secret = request.json.get('secret', None)

    if not username or not password:
        return jsonify({"error": "Missing username or password"}), 400

    # Authenticate based on the configured method
    if AUTH_METHOD == "ldap":
        authenticated, user_data = authenticate_ldap(username, password)
    else:
        authenticated, user_data = authenticate_file(username, password)

    if not authenticated:
        error_message = "Invalid username or password"
        if "error" in user_data:
            error_message = user_data["error"]
        return jsonify({"error": error_message}), 401
    
    raw_groups = user_data.get("groups", [])
    normalized_groups = extract_group_cn(raw_groups)

    # Create base user context
    user_context = {
        "user_id": username,
        "email": user_data.get("email", ""),
        "groups": normalized_groups,
        "roles": user_data.get("roles", []),
        "team_id": get_team_id_from_user(username, user_data)
    }

    # If an API key was provided, check pre-validation and get additional claims
    api_key_namespace = None
    if api_key:
        # Enhanced pre-validation with GES namespace support
        validation_result = check_pre_validation_with_ges(api_key, normalized_groups, username)
        if not validation_result["valid"]:
            return jsonify({
                "error": validation_result["message"],
                "required_group": validation_result.get("required_group"),
                "required_namespace": validation_result.get("ges_namespace"),
                "validation_type": validation_result.get("validation_type")
            }), 403
        
        api_key_namespace = validation_result.get("ges_namespace")
        
        # Enhanced user context with namespace info
        user_context = {
            "user_id": username,
            "team_id": get_team_id_from_user(username, user_data),
            "groups": normalized_groups,
            "api_key_id": api_key,
            "ges_namespace": api_key_namespace  # Add namespace to context
        }
        
        # Get GES roles for the namespace if specified
        if api_key_namespace:
            ges_roles = get_ges_roles_for_namespace(username, api_key_namespace)
            user_context["ges_roles"] = ges_roles
            user_context["roles"] = user_context.get("roles", []) + ges_roles
        
        logger.info(f"Processing API key with user_context: {user_context}")
        api_key_claims = get_additional_claims(api_key, user_context)
    else:
        api_key_claims = get_additional_claims(None, user_context)

    # Log which API key is being used
    if api_key:
        logger.info(f"Using provided API key: {api_key}, Namespace: {api_key_namespace}")
    else:
        logger.info("No API key provided, using base API key")

    # Merge user data with additional claims
    claims = {**user_data, **api_key_claims}
    
    # Get expiration time from API key configuration if available
    expires_delta = app.config["JWT_ACCESS_TOKEN_EXPIRES"]
    if 'exp_hours' in claims:
        expires_delta = timedelta(hours=claims['exp_hours'])
        logger.info(f"Using custom expiration time from API key: {claims['exp_hours']} hours")
        claims.pop('exp_hours')
    
    # Add GES namespace information to claims
    if api_key_namespace:
        claims['ges_namespace'] = api_key_namespace
        claims['ges_roles'] = user_context.get('ges_roles', [])
    
    # If custom secret is provided, use it with PyJWT directly
    if custom_secret:
        import jwt
        import datetime as dt
        
        logger.info(f"Using custom secret for token generation")
        
        now = dt.datetime.now(dt.timezone.utc)
        access_token_exp = now + expires_delta
        refresh_token_exp = now + app.config["JWT_REFRESH_TOKEN_EXPIRES"]
        
        access_payload = {
            "iat": now,
            "nbf": now,
            "jti": str(uuid.uuid4()),
            "exp": access_token_exp,
            "sub": username,
            "type": "access",
            "fresh": True,
            **claims
        }
        
        refresh_payload = {
            "iat": now,
            "nbf": now,
            "jti": str(uuid.uuid4()),
            "exp": refresh_token_exp,
            "sub": username,
            "type": "refresh",
            **claims
        }
        
        algorithm = app.config.get('JWT_ALGORITHM', 'HS256')
        access_token = jwt.encode(access_payload, custom_secret, algorithm=algorithm)
        refresh_token = jwt.encode(refresh_payload, custom_secret, algorithm=algorithm)
        
        response_data = {
            "access_token": access_token,
            "refresh_token": refresh_token,
            "note": "Tokens generated with custom secret",
            "ges_enabled": GES_ENABLED,
            "ges_namespace": api_key_namespace
        }
        
        if api_key_namespace:
            response_data["ges_roles"] = user_context.get('ges_roles', [])
        
        return jsonify(response_data), 200
    else:
        # Standard token creation with application secret
        access_token = create_access_token(
            identity=username, 
            additional_claims=claims,
            expires_delta=expires_delta,
            fresh=True
        )
        refresh_token = create_refresh_token(identity=username, additional_claims=claims)
        
        response_data = {
            "access_token": access_token, 
            "refresh_token": refresh_token,
            "ges_enabled": GES_ENABLED,
            "ges_namespace": api_key_namespace
        }
        
        if api_key_namespace:
            response_data["ges_roles"] = user_context.get('ges_roles', [])
        
        return jsonify(response_data), 200

def get_team_id_from_user(username, user_data):
    """
    Determine the team ID from the user's data including GES roles
    """
    groups = user_data.get("groups", [])
    
    if "administrators" in groups or "admins" in groups:
        return "admin-team"
    elif "ai-team" in groups:
        return "ai-team"
    elif "ml-team" in groups:
        return "ml-team"
    
    return "general-users"

# GES Management Endpoints
@app.route('/ges/status', methods=['GET'])
@jwt_required()
def ges_status():
    """
    Get GES service status and configuration
    """
    current_user = get_jwt_identity()
    
    status_info = {
        "ges_enabled": GES_ENABLED,
        "ges_available": GES_AVAILABLE,
        "ges_integration_available": GES_INTEGRATION_AVAILABLE,
        "current_user": current_user,
        "configured_namespace": GES_NAMESPACE
    }
    
    if GES_ENABLED and hasattr(app, 'ges_service') and app.ges_service is not None:
        try:
            user_roles = get_ges_roles_for_namespace(current_user)
            status_info["user_ges_roles"] = user_roles
            status_info["connection_status"] = "healthy"
        except Exception as e:
            status_info["connection_status"] = f"error: {str(e)}"
    
    return jsonify(status_info), 200

@app.route('/ges/namespaces', methods=['GET'])
@jwt_required()
def get_ges_namespaces():
    """
    Get available GES namespaces for the current user
    """
    current_user = get_jwt_identity()
    
    if not GES_ENABLED:
        return jsonify({"error": "GES service not enabled"}), 503
    
    # This would typically come from GES API - for now returning configured namespace
    namespaces = [GES_NAMESPACE]
    
    # Add any additional namespaces from API keys that user has access to
    api_keys_dir = os.getenv("API_KEYS_DIR", "config/api_keys")
    if os.path.exists(api_keys_dir):
        for key_file in glob.glob(os.path.join(api_keys_dir, "*.yaml")):
            try:
                with open(key_file, 'r') as f:
                    key_data = yaml.safe_load(f)
                    namespace = key_data.get('claims', {}).get('static', {}).get('ges_namespace')
                    if namespace and namespace not in namespaces:
                        # Check if user has access to this namespace
                        roles = get_ges_roles_for_namespace(current_user, namespace)
                        if roles:
                            namespaces.append(namespace)
            except Exception as e:
                logger.error(f"Error reading API key file {key_file}: {str(e)}")
    
    return jsonify({
        "username": current_user,
        "available_namespaces": namespaces,
        "default_namespace": GES_NAMESPACE
    }), 200

@app.route('/ges/roles/<namespace>', methods=['GET'])
@jwt_required()
def get_namespace_roles(namespace):
    """
    Get GES roles for current user in a specific namespace
    """
    current_user = get_jwt_identity()
    
    if not GES_ENABLED:
        return jsonify({"error": "GES service not enabled"}), 503
    
    try:
        roles = get_ges_roles_for_namespace(current_user, namespace)
        return jsonify({
            "username": current_user,
            "namespace": namespace,
            "ges_roles": roles,
            "timestamp": datetime.now().isoformat()
        }), 200
    except Exception as e:
        logger.error(f"Error getting GES roles for {current_user} in namespace {namespace}: {str(e)}")
        return jsonify({"error": f"Failed to get GES roles: {str(e)}"}), 500

# Existing endpoints remain the same...
@app.route('/refresh', methods=['POST'])
@jwt_required(refresh=True)
def refresh():
    current_user = get_jwt_identity()
    jwt_claims = get_jwt()
    
    reserved_claims = ['exp', 'iat', 'nbf', 'jti', 'type', 'fresh']
    additional_claims = {key: value for key, value in jwt_claims.items() 
                         if key not in reserved_claims}
    
    access_token = create_access_token(
        identity=current_user,
        additional_claims=additional_claims
    )
    
    logger.info(f"Refreshing token for user {current_user}")
    
    return jsonify(access_token=access_token), 200

@app.route('/decode', methods=['POST'])
def decode():
    # ... existing decode implementation ...
    pass

@app.route('/validate', methods=['POST'])
def validate_token():
    # ... existing validate implementation ...
    pass

@app.route('/protected', methods=['GET'])
@jwt_required()
def protected():
    current_user = get_jwt_identity()
    jwt_claims = get_jwt()
    
    response_data = {
        "logged_in_as": current_user,
        "ges_namespace": jwt_claims.get('ges_namespace'),
        "ges_roles": jwt_claims.get('ges_roles', [])
    }
    
    return jsonify(response_data), 200

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=int(os.getenv('PORT', 5000)))
