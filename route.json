{
  "uri": "/api/*",
  "plugins": {
    "jwt-auth": {
      "key": "user-key",
      "secret": "your-jwt-secret"
    },
    "serverless-pre-function": {
      "phase": "rewrite",
      "functions": [
        "return function(conf, ctx)
          -- Required modules
          local core = require('apisix.core')
          local http = require('resty.http')
          
          -- Client credentials (consider using secrets manager)
          local CLIENT_ID = 'your_client_id'
          local CLIENT_SECRET = 'your_client_secret'
          
          -- 1. Simple Token Generation Option
          local timestamp = ngx.now() * 1000 -- current time in milliseconds
          local bearer_token = core.base64.encode(CLIENT_ID .. ':' .. CLIENT_SECRET .. ':' .. timestamp)
          
          -- 2. OAuth Token Fetch Option (uncomment if needed)
          --[[
          local httpc = http.new()
          local res, err = httpc:request_uri('https://auth-server.com/oauth/token', {
            method = 'POST',
            body = 'grant_type=client_credentials' ..
                   '&client_id=' .. CLIENT_ID ..
                   '&client_secret=' .. CLIENT_SECRET,
            headers = {
              ['Content-Type'] = 'application/x-www-form-urlencoded'
            }
          })
          
          if not res then
            core.log.error('Token fetch failed: ', err)
            return ngx.exit(500)
          end
          
          local token_data = core.json.decode(res.body)
          bearer_token = token_data.access_token
          --]]
          
          -- Set the Authorization header
          core.request.set_header(ctx, 'Authorization', 'Bearer ' .. bearer_token)
        end"
      ]
    }
  },
  "upstream": {
    "nodes": {
      "your-upstream-service:8080": 1
    }
  }
}

2. Advanced Version with Caching

{
  "plugins": {
    "serverless-pre-function": {
      "phase": "rewrite",
      "functions": [
        "return function(conf, ctx)
          local core = require('apisix.core')
          local http = require('resty.http')
          
          -- Shared memory zone for caching (must be defined in nginx.conf)
          local token_cache = ngx.shared.token_cache
          local cache_key = 'client_token'
          
          -- Check cache first
          local cached_token = token_cache:get(cache_key)
          if cached_token then
            core.request.set_header(ctx, 'Authorization', 'Bearer ' .. cached_token)
            return
          end
          
          -- Fetch new token
          local httpc = http.new()
          local res, err = httpc:request_uri('https://auth-server.com/token', {
            method = 'POST',
            body = 'grant_type=client_credentials' ..
                   '&client_id=your_client_id' ..
                   '&client_secret=your_client_secret',
            headers = {
              ['Content-Type'] = 'application/x-www-form-urlencoded'
            }
          })
          
          if not res then
            core.log.error('Token fetch failed: ', err)
            return ngx.exit(500)
          end
          
          local token_data = core.json.decode(res.body)
          local new_token = token_data.access_token
          
          -- Cache with 5 minute expiration
          token_cache:set(cache_key, new_token, 300)
          
          -- Set header
          core.request.set_header(ctx, 'Authorization', 'Bearer ' .. new_token)
        end"
      ]
    }
  }
}
