if user_match or group_matches:
    policy_info = {
        "policy_path": policy_path,
        "policy_name": os.path.basename(policy_path),
    }

    # Add enabled status if it exists
    if enabled_match:
        policy_info["enabled"] = enabled_match.group(1) == "true"
    else:
        policy_info["enabled"] = True

    if allowed_model:
        policy_info["allowed_models"] = allowed_models_info

    roles_match = re.search(r'roles\s*=\s*\{(.*?)\}', policy_content, re.DOTALL)
    if roles_match:
        roles_content = roles_match.group(1)
        all_actions = []  # To collect all actions for the role field

        # Extract user's direct role actions if available
        if user_match:
            user_role = user_match.group(1)
            role_actions_match = re.search(rf'"{user_role}":\s*\[(.*?)\]', roles_content)
            if role_actions_match:
                actions = re.findall(r'"([^"]+)"', role_actions_match.group(1))
                all_actions.extend(actions)

        # Extract group role actions
        for group_match in group_matches:
            group_role = group_match["role"]
            role_actions_match = re.search(rf'"{group_role}":\s*\[(.*?)\]', roles_content)
            if role_actions_match:
                actions = re.findall(r'"([^"]+)"', role_actions_match.group(1))
                all_actions.extend(actions)

        # Add combined actions to role field (remove duplicates)
        policy_info["role"] = list(set(all_actions))

    applicable_policies.append(policy_info)
