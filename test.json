{
    "servers": [
        {"id": "app", "protocols": ["https", "ssh"], "ports": ["p1", "p2", "p3"]},
        {"id": "db", "protocols": ["mysql"], "ports": ["p3"]},
        {"id": "cache", "protocols": ["memcache"], "ports": ["p3"]},
        {"id": "ci", "protocols": ["http"], "ports": ["p1", "p2"]},
        {"id": "busybox", "protocols": ["telnet"], "ports": ["p1"]}
    ],
    "networks": [
        {"id": "net1", "public": false},
        {"id": "net2", "public": false},
        {"id": "net3", "public": true},
        {"id": "net4", "public": true}
    ],
    "ports": [
        {"id": "p1", "network": "net1"},
        {"id": "p2", "network": "net3"},
        {"id": "p3", "network": "net2"}
    ],
    "security_rules": {
        "allowed_protocols": ["https", "ssh", "mysql", "memcache"],
        "banned_ports": ["p1"]
    }
}


=============rego:
package network.policy

import input as request

# Default deny for all checks
default allow = false

# Check if server exists
server_exists {
    data.servers[_].id == request.server_id
}

# Check if server is compliant (uses only allowed protocols)
is_compliant[server_id] {
    server := data.servers[_]
    server_id := server.id
    not non_compliant_protocols[server_id]
}

non_compliant_protocols[server_id] {
    server := data.servers[_]
    server_id := server.id
    proto := server.protocols[_]
    not data.security_rules.allowed_protocols[_] == proto
}

# Find servers using banned ports
uses_banned_ports[server_id] {
    server := data.servers[_]
    server_id := server.id
    port := server.ports[_]
    data.security_rules.banned_ports[_] == port
}

# Get all public servers
public_servers[server] {
    server := data.servers[_]
    port := data.ports[_]
    port.id == server.ports[_]
    network := data.networks[_]
    network.id == port.network
    network.public == true
}
