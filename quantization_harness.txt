from transformers import AutoTokenizer, AutoModelForCausalLM

model_name = "codellama/CodeLlama-7b-Instruct-hf"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(model_name, device_map="cpu", torch_dtype="float32")


import torch
from torch.quantization import quantize_dynamic

quantized_model = quantize_dynamic(
    model,  # the original model
    {torch.nn.Linear},  # layers to quantize
    dtype=torch.qint8  # quantization type
)

prompt = "def hello_world():\n    print('Hello"
inputs = tokenizer(prompt, return_tensors="pt").to("cpu")


=========================
import onnx
from onnxruntime.quantization import quantize_dynamic, QuantType

# Step 1: Load your ONNX model to verify it's valid
onnx_model = onnx.load("codellama-7b-onnx/model.onnx")
onnx.checker.check_model(onnx_model)

# Step 2: Quantize with correct parameters
quantize_dynamic(
    model_input="codellama-7b-onnx/model.onnx",
    model_output="codellama-7b-onnx-quantized/model_quant.onnx",
    weight_type=QuantType.QInt8,
    per_channel=False,  # Important for LLMs
    optimize_model=False,  # Some versions accept this
    extra_options={
        "WeightSymmetric": True,
        "ActivationSymmetric": False,
        "EnableSubgraph": True  # Helps with transformer models
    }
)

print("Quantization completed successfully!")
outputs = quantized_model.generate(**inputs, max_new_tokens=20)
print(tokenizer.decode(outputs[0], skip_special_tokens=True))

quantized_model.save_pretrained("codellama-7b-instruct-quantized")
tokenizer.save_pretrained("codellama-7b-instruct-quantized")



==============================================
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
from torch.quantization import quantize_dynamic
import os

# Choose CPU and use float32 first
device = torch.device("cpu")
model_name = "codellama/CodeLlama-7b-Instruct-hf"

print("Loading tokenizer...")
tokenizer = AutoTokenizer.from_pretrained(model_name)

print("Loading model in float32 (unquantized)...")
model = AutoModelForCausalLM.from_pretrained(model_name, torch_dtype=torch.float32)
model.to(device)

print("Applying dynamic quantization...")
# Quantize Linear layers (most effective on CPUs)
quantized_model = quantize_dynamic(
    model, 
    {torch.nn.Linear}, 
    dtype=torch.qint8
)

print("Saving quantized model...")
save_path = "./codellama-7b-instruct-quantized"
os.makedirs(save_path, exist_ok=True)
quantized_model.save_pretrained(save_path)
tokenizer.save_pretrained(save_path)

print("Quantized model saved at:", save_path)

# Optional test
prompt = "def merge_sort(arr):"
inputs = tokenizer(prompt, return_tensors="pt").to(device)
outputs = quantized_model.generate(**inputs, max_new_tokens=40)
print("\nGenerated:\n", tokenizer.decode(outputs[0], skip_special_tokens=True))

