{
  "uri": "/protected/*",
  "name": "dynamic-upstream-auth-route",
  "methods": ["GET", "POST", "PUT", "DELETE"],
  "plugins": {
    "jwt-auth": {
      "key": "user-key",
      "secret": "your-jwt-secret-here",
      "algorithm": "HS256"
    },
    "serverless-pre-function": {
      "phase": "rewrite",
      "functions": [
        "return function(conf, ctx)
          -- Import required modules
          local core = require('apisix.core')
          local http = require('resty.http')
          
          -- Your client credentials
          local client_id = 'your_client_id'
          local client_secret = 'your_client_secret'
          
          -- Generate timestamp or nonce for uniqueness if needed
          local timestamp = tostring(ngx.now())
          
          -- Create your bearer token (customize this logic as needed)
          -- This could be a JWT, base64 encoded credentials, or any format your upstream expects
          local bearer_token = core.base64.encode(client_id .. ':' .. client_secret .. ':' .. timestamp)
          
          -- Alternative: If you need to fetch a token from an auth service
          --[[
          local httpc = http.new()
          local res, err = httpc:request_uri('https://auth-service/token', {
            method = 'POST',
            body = 'grant_type=client_credentials&client_id='..client_id..'&client_secret='..client_secret,
            headers = {
              ['Content-Type'] = 'application/x-www-form-urlencoded'
            }
          })
          if not res then
            core.log.error('failed to fetch token: ', err)
            return 500, { message = 'Failed to obtain upstream token' }
          end
          local data = core.json.decode(res.body)
          bearer_token = data.access_token
          --]]
          
          -- Set the Authorization header for upstream
          core.request.set_header(ctx, 'Authorization', 'Bearer ' .. bearer_token)
        end"
      ]
    }
  },
  "upstream": {
    "type": "roundrobin",
    "nodes": {
      "your-upstream-service:8080": 1
    }
  }
}



=======================
1. Basic Route Configuration

curl -X PUT http://127.0.0.1:9180/apisix/admin/routes/1 \
  -H "Content-Type: application/json" \
  -H "X-API-KEY: <your-admin-key>" \
  -d '{
    "uri": "/api/*",
    "plugins": {
      "jwt-auth": {
        "key": "user-key",
        "secret": "your-jwt-secret"
      },
      "serverless-pre-function": {
        "phase": "rewrite",
        "functions": [
          "return function(conf, ctx) \
            local core = require(\"apisix.core\") \
            local http = require(\"resty.http\") \
            local CLIENT_ID = \"your_client_id\" \
            local CLIENT_SECRET = \"your_client_secret\" \
            local timestamp = ngx.now() * 1000 \
            local bearer_token = core.base64.encode(CLIENT_ID .. \":\" .. CLIENT_SECRET .. \":\" .. timestamp) \
            -- If using OAuth token fetch, uncomment and adjust below \
            -- local httpc = http.new() \
            -- local res, err = httpc:request_uri(\"https://auth-server.com/oauth/token\", { \
            --   method = \"POST\", \
            --   body = \"grant_type=client_credentials&client_id=\" .. CLIENT_ID .. \"&client_secret=\" .. CLIENT_SECRET, \
            --   headers = { [\"Content-Type\"] = \"application/x-www-form-urlencoded\" } \
            -- }) \
            -- if not res then core.log.error(\"Token fetch failed: \", err) return ngx.exit(500) end \
            -- local token_data = core.json.decode(res.body) \
            -- bearer_token = token_data.access_token \
            core.request.set_header(ctx, \"Authorization\", \"Bearer \" .. bearer_token) \
          end"
        ]
      }
    },
    "upstream": {
      "type": "roundrobin",
      "nodes": {
        "your-upstream-service:8080": 1
      }
    }
  }'

==================
2. Advanced Version with Caching
{
  "plugins": {
    "serverless-pre-function": {
      "phase": "rewrite",
      "functions": [
        "return function(conf, ctx)
          local core = require('apisix.core')
          local http = require('resty.http')
          
          -- Shared memory zone for caching (must be defined in nginx.conf)
          local token_cache = ngx.shared.token_cache
          local cache_key = 'client_token'
          
          -- Check cache first
          local cached_token = token_cache:get(cache_key)
          if cached_token then
            core.request.set_header(ctx, 'Authorization', 'Bearer ' .. cached_token)
            return
          end
          
          -- Fetch new token
          local httpc = http.new()
          local res, err = httpc:request_uri('https://auth-server.com/token', {
            method = 'POST',
            body = 'grant_type=client_credentials' ..
                   '&client_id=your_client_id' ..
                   '&client_secret=your_client_secret',
            headers = {
              ['Content-Type'] = 'application/x-www-form-urlencoded'
            }
          })
          
          if not res then
            core.log.error('Token fetch failed: ', err)
            return ngx.exit(500)
          end
          
          local token_data = core.json.decode(res.body)
          local new_token = token_data.access_token
          
          -- Cache with 5 minute expiration
          token_cache:set(cache_key, new_token, 300)
          
          -- Set header
          core.request.set_header(ctx, 'Authorization', 'Bearer ' .. new_token)
        end"
      ]
    }
  }
}


Implementation Steps
Create the Route:

curl http://127.0.0.1:9180/apisix/admin/routes/1 \
-H 'X-API-KEY: your-admin-key' -X PUT -d '
{
  "uri": "/secure/*",
  "plugins": {
    "jwt-auth": { /* your config */ },
    "serverless-pre-function": { /* above config */ }
  },
  "upstream": { /* your config */ }
}'


====================
Another way:
curl http://127.0.0.1:9180/apisix/admin/routes/1 \
-H 'X-API-KEY: your-admin-key' \
-X PUT -d '
{
  "uri": "/proxy-api/*",
  "name": "httpbin-with-dynamic-auth",
  "plugins": {
    "jwt-auth": {
      "key": "api-user",
      "secret": "your-secret-here",
      "algorithm": "HS256"
    },
    "serverless-pre-function": {
      "phase": "rewrite",
      "functions": [
        "return function(conf, ctx)
          local core = require(\"apisix.core\")
          local http = require(\"resty.http\")
          
          -- 1. Check cache first
          local cached_token = ngx.shared.token_cache:get(\"httpbin_token\")
          if cached_token then
            core.request.set_header(ctx, \"Authorization\", \"Bearer \" .. cached_token)
            core.log.warn(\"Using cached token\")
            return
          end
          
          -- 2. Fetch new token if cache is empty
          local httpc = http.new()
          local res, err = httpc:request_uri(\"https://your-auth-service.com/token\", {
            method = \"POST\",
            body = \"grant_type=client_credentials\" ..
                   \"&client_id=YOUR_CLIENT_ID\" ..
                   \"&client_secret=YOUR_CLIENT_SECRET\",
            headers = {
              [\"Content-Type\"] = \"application/x-www-form-urlencoded\",
              [\"Accept\"] = \"application/json\"
            },
            ssl_verify = false -- For testing only, remove in production
          })
          
          if not res then
            core.log.error(\"Token fetch failed: \", err)
            return ngx.exit(502)
          end
          
          -- 3. Parse response and cache the token
          local token_data = core.json.decode(res.body)
          if not token_data.access_token then
            core.log.error(\"Invalid token response: \", res.body)
            return ngx.exit(502)
          end
          
          ngx.shared.token_cache:set(\"httpbin_token\", token_data.access_token, token_data.expires_in or 300)
          core.request.set_header(ctx, \"Authorization\", \"Bearer \" .. token_data.access_token)
          core.log.warn(\"Generated new token\")
        end"
      ]
    },
    "proxy-rewrite": {
      "uri": "/api/jo",
      "host": "httpbin.org"
    }
  },
  "upstream": {
    "type": "roundrobin",
    "nodes": {
      "httpbin.org:80": 1
    },
    "scheme": "http",
    "timeout": {
      "connect": 5,
      "send": 10,
      "read": 10
    }
  }
}'
