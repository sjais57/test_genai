return function(conf, ctx)
  local core = require("apisix.core")
  local CLIENT_ID = "your_client_id"
  local CLIENT_SECRET = "your_client_secret"
  local timestamp = ngx.now() * 1000
  local bearer_token = core.base64.encode(CLIENT_ID .. ":" .. CLIENT_SECRET .. ":" .. timestamp)
  core.request.set_header(ctx, "Authorization", "Bearer " .. bearer_token)
end


The create route:

curl -X PUT http://127.0.0.1:9180/apisix/admin/routes/1 \
  -H "X-API-KEY: <your-admin-key>" \
  -H "Content-Type: application/json" \
  -d '{
    "uri": "/api/*",
    "plugins": {
      "jwt-auth": {},
      "serverless-pre-function": {
        "phase": "rewrite",
        "functions": ["file:///opt/apisix/lua/fetch_token.lua"]
      }
    },
    "upstream": {
      "type": "roundrobin",
      "nodes": {
        "your-upstream-service:8080": 1
      }
    }
  }'


+++++++
1. Lua Script for Bearer Token Generation
-- bearer_token_generator.lua
local _M = {}

function _M.generate_bearer_token(client_id, client_secret)
    local core = require("apisix.core")
    local resty_http = require("resty.http")
    local cjson = require("cjson")
    
    -- 1. Encode credentials (Basic Auth format)
    local credentials = client_id .. ":" .. client_secret
    local encoded_credentials = ngx.encode_base64(credentials)
    
    -- 2. Make token request
    local httpc = resty_http.new()
    local res, err = httpc:request_uri("https://auth-server.com/oauth/token", {
        method = "POST",
        body = "grant_type=client_credentials",
        headers = {
            ["Authorization"] = "Basic " .. encoded_credentials,
            ["Content-Type"] = "application/x-www-form-urlencoded"
        },
        ssl_verify = false -- For testing only
    })
    
    -- 3. Handle response
    if not res then
        core.log.error("Token request failed: ", err)
        return nil, err
    end
    
    if res.status >= 400 then
        core.log.error("Token server error: ", res.status, " ", res.body)
        return nil, res.body
    end
    
    local token_data = cjson.decode(res.body)
    return token_data.access_token
end

return _M


2. APISIX Route Configuration
curl http://127.0.0.1:9180/apisix/admin/routes/1 \
-H 'X-API-KEY: your-admin-key' \
-X PUT -d '
{
  "uri": "/secure-api/*",
  "name": "jwt-with-upstream-auth",
  "plugins": {
    "jwt-auth": {
      "key": "api-user",
      "secret": "your-jwt-secret-here",
      "algorithm": "HS256",
      "exp": 86400
    },
    "serverless-pre-function": {
      "phase": "rewrite",
      "functions": [
        "return function(conf, ctx)
          local core = require(\"apisix.core\")
          local token_gen = require(\"bearer_token_generator\")
          
          -- Get client credentials from secrets (or config)
          local client_id = \"YOUR_CLIENT_ID\"
          local client_secret = \"YOUR_CLIENT_SECRET\"
          
          -- Generate Bearer token
          local token, err = token_gen.generate_bearer_token(client_id, client_secret)
          if not token then
            core.log.error(\"Failed to generate token: \", err)
            return ngx.exit(502)
          end
          
          -- Set Authorization header for upstream
          core.request.set_header(ctx, \"Authorization\", \"Bearer \" .. token)
          core.log.warn(\"Generated upstream token: \", token)
        end"
      ]
    },
    "proxy-rewrite": {
      "uri": "/api/jo",
      "host": "httpbin.org"
    }
  },
  "upstream": {
    "type": "roundrobin",
    "nodes": {
      "httpbin.org:80": 1
    }
  }
}'


================================
-- /opt/apisix/lua/fetch_token.lua
return function(conf, ctx)
  local core = require("apisix.core")
  local http = require("resty.http")

  local client_id = "your_client_id"
  local client_secret = "your_client_secret"

  local httpc = http.new()
  local res, err = httpc:request_uri("https://auth.example.com/oauth/token", {
    method = "POST",
    body = "grant_type=client_credentials&client_id=" .. client_id .. "&client_secret=" .. client_secret,
    headers = {
      ["Content-Type"] = "application/x-www-form-urlencoded"
    },
    ssl_verify = false
  })

  if not res or res.status ~= 200 then
    core.log.error("Failed to fetch token: ", err or res.status)
    return ngx.exit(500)
  end

  local token_data = core.json.decode(res.body)
  local access_token = token_data.access_token
  core.request.set_header(ctx, "Authorization", "Bearer " .. access_token)
end


curl -X PUT http://127.0.0.1:9180/apisix/admin/routes/1 \
  -H "X-API-KEY: <your-admin-key>" \
  -H "Content-Type: application/json" \
  -d '{
    "uri": "/api/*",
    "plugins": {
      "jwt-auth": {},
      "serverless-pre-function": {
        "phase": "rewrite",
        "functions": ["file:///opt/apisix/lua/fetch_token.lua"]
      }
    },
    "upstream": {
      "type": "roundrobin",
      "nodes": {
        "upstream.example.com:443": 1
      },
      "scheme": "https"
    }
  }'

