def get_metadata_filters(user_groups, metadata_filters, **kwargs):
    logger.info(f"user_groups received: {user_groups}")
    logger.info(f"Evaluating metadata_filters: {metadata_filters}")
    for group in user_groups:
        cn = extract_cn(group)
        for rule in metadata_filters:
            match_type = rule.get("match_type")
            if match_type == "startswith":
                prefix = rule.get("group_prefix")
                if prefix and cn.startswith(prefix):
                    value = rule.get("value")
                    classification = value[-1] if isinstance(value, list) and value else value
                    logger.info(f"Extracted CN '{cn}' matches prefix '{prefix}'. Returning classification: {classification}")
                    return {"metadata": {"classification": classification}}
            elif match_type == "exact":
                name = rule.get("group_name")
                if name and cn == name:
                    value = rule.get("value")
                    classification = value[-1] if isinstance(value, list) and value else value
                    logger.info(f"Extracted CN '{cn}' matches exact name '{name}'. Returning classification: {classification}")
                    return {"metadata": {"classification": classification}}
    logger.info("No matching group found. Returning None.")
    return None


=============

dynamic_metadata:
  type: function
  module: claims.group_category
  function: get_metadata_filters
  args:
    user_groups: "[groups]"
    metadata_filters:
      - match_type: "startswith"
        group_prefix: "adspsa_"
        value:
          - proprietary
          - confidential
      - match_type: "exact"
        group_name: "alngc_maltas_maltatat_tp_busp"
        value:
          - confidential

      - match_type: "exact"
        group_name: "alngc_maltas_maltatat_tp_busp"
        value:
          - confidential
