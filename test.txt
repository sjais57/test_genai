def get_metadata_filters(user_groups, classification, **kwargs):
    logger.info(f"user_groups received: {user_groups}")
    logger.info(f"Evaluating classification: {classification}")
    
    for group in user_groups:
        cn = extract_cn(group)
        for classifications in classification:
            match_type = classifications.get("match_type")
            if match_type == "startswith":
                prefix = classifications.get("group_prefix")
                if prefix and cn.startswith(prefix):
                    logger.info(f"Extracted CN '{cn}' matches prefix '{prefix}'. Returning metadata.")
                    # Convert list values into separate dictionary keys
                    metadata = {"classification": classifications["value"][0]}
                    if len(classifications["value"]) > 1:
                        metadata["confidential"] = classifications["value"][1]
                    return metadata
            elif match_type == "exact":
                name = classifications.get("group_name")
                if name and cn == name:
                    logger.info(f"Extracted CN '{cn}' matches exact name '{name}'. Returning metadata.")
                    metadata = {"classification": classifications["value"][0]}
                    if len(classifications["value"]) > 1:
                        metadata["confidential"] = classifications["value"][1]
                    return metadata
    
    logger.info("No matching group found for classification rules. Returning None.")
    return None

=============

dynamic_metadata:
  type: function
  module: claims.group_category
  function: get_metadata_filters
  args:
    user_groups: "[groups]"
    metadata_filters:
      - match_type: "startswith"
        group_prefix: "adspsa_"
        value:
          - proprietary
          - confidential
      - match_type: "exact"
        group_name: "alngc_maltas_maltatat_tp_busp"
        value:
          - confidential

      - match_type: "exact"
        group_name: "alngc_maltas_maltatat_tp_busp"
        value:
          - confidential
