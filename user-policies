@router.post("/user_policies")
async def list_user_policies(request: UserPoliciesRequest):
    start_time = time.time()
    client_dir = "policies/clients"
    applicable_policies = []

    if not os.path.exists(client_dir):
        return {"policies": []}

    for file in os.listdir(client_dir):
        if file.endswith(".rego") and not file.endswith("_test.rego"):
            policy_path = os.path.join(client_dir, file)
            policy_name = os.path.basename(policy_path)

            with open(policy_path, "r") as f:
                policy_content = f.read()

            # Skip disabled policies
            enabled_match = re.search(r'policy_enabled\s*:\s*(true|false)', policy_content)
            if enabled_match and enabled_match.group(1) == "false":
                continue

            # --- Extract lane_access (JSON-like array inside rego) ---
            lane_access = []
            lane_match = re.search(r'lane_access\s*=\s*(\[[^\]]*\])', policy_content, re.DOTALL)
            if lane_match:
                try:
                    lane_access = json.loads(lane_match.group(1).replace("'", '"'))
                except Exception:
                    pass  # skip if malformed

            # --- Extract gpu ---
            gpu = ""
            gpu_match = re.search(r'gpu\s*:\s*"?([\w\-]*)"?', policy_content)
            if gpu_match:
                gpu = gpu_match.group(1)

            # --- Extract allowed models ---
            ll_models = []
            models_match = re.search(r'allowed_models\s*=\s*\[(.*?)\]', policy_content, re.DOTALL)
            if models_match:
                ll_models = re.findall(r'"([^"]+)"', models_match.group(1))

            # --- Extract deploy_models ---
            deploy_models = {}
            deploy_match = re.search(r'deploy_models\s*=\s*\{(.*?)\}', policy_content, re.DOTALL)
            if deploy_match:
                deploy_str = "{" + deploy_match.group(1) + "}"
                try:
                    deploy_models = json.loads(
                        deploy_str.replace("=", ":").replace("'", '"')
                    )
                except Exception:
                    pass

            # --- Extract roles for user + groups ---
            roles = []
            user_match = re.search(rf'"{request.user_id}"\s*:\s*"(.*?)"', policy_content)
            if user_match:
                roles.append(user_match.group(1))

            for group_id in request.group_ids:
                group_match = re.search(rf'"{group_id}"\s*:\s*"(.*?)"', policy_content)
                if group_match:
                    roles.append(group_match.group(1))

            if not roles:
                # no user/group role in this policy
                continue

            policy_info = {
                "policy_name": policy_name,
                "lane_access": lane_access,
                "role": roles,
                "gpu": gpu,
                "ll_models": ll_models,
                "deploy_models": deploy_models
            }

            applicable_policies.append(policy_info)

    end_time = time.time()
    print(f"Total execution time: {end_time - start_time:.3f} seconds")
    return {"policies": applicable_policies}
