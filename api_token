{
  "name": "test",
  "uri": "/sas2py/test",
  "methods": ["POST"],
  "upstream": {
    "type": "roundrobin",
    "nodes": {
      "${environments.${environment}.urls.groq_base_url}": 1
    },
    "timeout": {
      "connect": 60,
      "send": 60,
      "read": 60
    }
  },
  "plugins": {
    "jwt-auth": {
      "secret": "your-jwt-secret-here",
      "key": "Authorization",
      "algorithm": "HS256"
    },
    "request-id": {
      "header_name": "X-Request-Id",
      "include_in_response": true,
      "algorithm": "uuid"
    },
    "prometheus": {
      "prefer_name": true
    },
    "ai-prompt-template": {
      "templates": [
        {
          "name": "python-test-generator",
          "template": {
            "model": "llama-3.1-8b-instant",
            "messages": [
              {
                "role": "system",
                "content": "You are a Python testing expert. Generate comprehensive unit tests for the provided Python code using pytest. Include edge cases and assertions."
              },
              {
                "role": "user",
                "content": "{{user_input}}"
              }
            ]
          }
        }
      ],
      "_meta": {
        "priority": 2520
      }
    },
    "proxy-rewrite": {
      "uri": "/openai/v1/chat/completions",
      "host": "api.groq.com",
      "headers": {
        "Accept-Encoding": "identity"
        // Authorization header REMOVED - will be set by Lua script
      }
    },
    "serverless-pre-function": {
      "phase": "rewrite",
      "functions": [
        "return function(conf, ctx)\n  local jwt = require('resty.jwt')\n  local cjson = require('cjson.safe')\n  \n  -- Get the JWT token from the Authorization header\n  local auth_header = ngx.req.get_headers()['Authorization']\n  \n  if not auth_header then\n    ngx.log(ngx.ERR, '[JWT-EXTRACT] No Authorization header found')\n    ngx.header['Content-Type'] = 'application/json'\n    ngx.status = 401\n    ngx.say(cjson.encode({\n      error = 'Unauthorized',\n      message = 'No Authorization header provided'\n    }))\n    return ngx.exit(401)\n  end\n  \n  -- Extract Bearer token\n  local bearer, token = string.match(auth_header, '^(Bearer)%s+(.+)$')\n  if not bearer or not token then\n    ngx.log(ngx.ERR, '[JWT-EXTRACT] Invalid Authorization header format. Expected: Bearer <token>')\n    ngx.header['Content-Type'] = 'application/json'\n    ngx.status = 401\n    ngx.say(cjson.encode({\n      error = 'Unauthorized',\n      message = 'Invalid Authorization header format. Expected: Bearer <token>'\n    }))\n    return ngx.exit(401)\n  end\n  \n  ngx.log(ngx.INFO, '[JWT-EXTRACT] JWT token found, attempting to decode')\n  \n  -- Decode the JWT token (without verification for extraction)\n  local jwt_obj, err = jwt:load_jwt(token)\n  \n  if not jwt_obj then\n    ngx.log(ngx.ERR, '[JWT-EXTRACT] Failed to load JWT token: ', err)\n    ngx.header['Content-Type'] = 'application/json'\n    ngx.status = 401\n    ngx.say(cjson.encode({\n      error = 'Unauthorized',\n      message = 'Invalid JWT token format'\n    }))\n    return ngx.exit(401)\n  end\n  \n  if not jwt_obj.valid then\n    ngx.log(ngx.ERR, '[JWT-EXTRACT] Invalid JWT token: ', jwt_obj.reason)\n    ngx.header['Content-Type'] = 'application/json'\n    ngx.status = 401\n    ngx.say(cjson.encode({\n      error = 'Unauthorized',\n      message = 'Invalid JWT token: ' .. (jwt_obj.reason or 'unknown error')\n    }))\n    return ngx.exit(401)\n  end\n  \n  -- Extract fedsso_tkn from JWT payload\n  local fedsso_tkn = jwt_obj.payload.fedsso_tkn\n  \n  if not fedsso_tkn then\n    ngx.log(ngx.ERR, '[JWT-EXTRACT] fedsso_tkn not found in JWT payload. Available claims: ', cjson.encode(jwt_obj.payload))\n    ngx.header['Content-Type'] = 'application/json'\n    ngx.status = 401\n    ngx.say(cjson.encode({\n      error = 'Unauthorized',\n      message = 'fedsso_tkn claim not found in JWT token'\n    }))\n    return ngx.exit(401)\n  end\n  \n  ngx.log(ngx.INFO, '[JWT-EXTRACT] Successfully extracted fedsso_tkn from JWT')\n  \n  -- Set the Authorization header for the upstream request with fedsso_tkn\n  ngx.req.set_header('Authorization', 'Bearer ' .. fedsso_tkn)\n  \n  -- Log successful processing (without exposing the actual token)\n  ngx.log(ngx.INFO, '[JWT-EXTRACT] Authorization header set with fedsso_tkn for upstream request')\n  \n  return\nend"
      ]
    }
  }
}
