"serverless-pre-function": {
  "phase": "access",
  "_meta": { "priority": 1000 },
  "functions": [
    "return function(conf, ctx) \
      local cjson = require('cjson.safe'); \
      local ngx = ngx; \
      local ngx_req = ngx.req; \
      local function b64_url_decode(input) \
        if not input then return nil end; \
        input = input:gsub('-', '+'):gsub('_', '/'); \
        local mod = #input % 4; \
        if mod == 2 then input = input .. '=='; \
        elseif mod == 3 then input = input .. '='; \
        elseif mod == 1 then return nil end; \
        local ok, decoded = pcall(ngx.decode_base64, input); \
        if not ok then return nil end; \
        return decoded; \
      end; \
      local claims = nil; \
      if ctx and ctx.var and ctx.var.jwt_payload then \
        claims = ctx.var.jwt_payload; \
      elseif ctx and ctx.authenticated_jwt then \
        claims = ctx.authenticated_jwt; \
      elseif ngx.ctx and ngx.ctx.jwt_payload then \
        claims = ngx.ctx.jwt_payload; \
      elseif ngx.ctx and ngx.ctx.authenticated_jwt then \
        claims = ngx.ctx.authenticated_jwt; \
      end; \
      if type(claims) == 'string' then \
        local parsed = cjson.decode(claims); \
        if parsed then claims = parsed end; \
      end; \
      if not claims then \
        local auth = ngx_req.get_headers()['Authorization'] or ngx_req.get_headers()['authorization']; \
        if auth and type(auth) == 'string' then \
          local m = auth:match('^%s*Bearer%s+(.+)%s*$') or auth:match('^%s*JWT%s+(.+)%s*$'); \
          if m then \
            local parts = {}; \
            for p in m:gmatch('[^%.]+') do table.insert(parts, p) end; \
            if #parts >= 2 then \
              local payload = b64_url_decode(parts[2]); \
              if payload then \
                local parsed = cjson.decode(payload); \
                if parsed then claims = parsed end; \
              end; \
            end; \
          end; \
        end; \
      end; \
      local fedsso = nil; \
      if type(claims) == 'table' then \
        fedsso = claims['fedsso_tkn'] or claims['fedssoToken'] or claims['fedsso']; \
      end; \
      if fedsso and type(fedsso) == 'string' and #fedsso > 0 then \
        ngx_req.set_header('Authorization', 'Bearer ' .. fedsso); \
        ngx.log(ngx.INFO, 'Authorization header replaced with fedsso_tkn'); \
      else \
        ngx.log(ngx.WARN, 'fedsso_tkn not found in JWT claims'); \
      end; \
    end"
  ]
},
"proxy-rewrite": {
  "uri": "/openai/v1/chat/completions",
  "host": "api.groq.com",
  "headers": {
    "Authorization": "Bearer ${fedsso_tkn}",
    "Accept-Encoding": "identity"
  }
}
