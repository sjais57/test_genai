Option 1: Separate Lua File via Custom Plugin (Advanced)
If you want full separation, the recommended approach is:

üì¶ Step 1: Create a Custom Plugin
Place your Lua script in a custom plugin file under /usr/local/apisix/plugins/my_plugin.lua:
<--Code-->
  -- my_plugin.lua
local core = require("apisix.core")
local http = require("resty.http")
local plugin_name = "my_plugin"

local schema = {
    type = "object",
    properties = {}
}

local _M = {
    version = 0.1,
    priority = 1000,
    name = plugin_name,
    schema = schema,
}

function _M.access(conf, ctx)
    local httpc = http.new()
    local res, err = httpc:request_uri("https://auth.example.com/oauth/token", {
        method = "POST",
        body = "grant_type=client_credentials&client_id=your-client-id&client_secret=your-client-secret",
        headers = {
            ["Content-Type"] = "application/x-www-form-urlencoded"
        },
        ssl_verify = false
    })

    if not res or res.status ~= 200 then
        return 500, { message = "Failed to fetch access token" }
    end

    local token_data = core.json.decode(res.body)
    if not token_data or not token_data.access_token then
        return 500, { message = "Invalid token response" }
    end

    core.request.set_header(ctx, "Authorization", "Bearer " .. token_data.access_token)
end

return _M

üìù Replace token URL, client ID, and secret accordingly.

  
üìÅ Step 2: Load Your Plugin
In config.yaml, add your plugin:

  plugins:
  - my_plugin
  - jwt-auth
  - serverless-pre-function
  ...

  Step 3: Restart APISIX:

  Step 4: Enable Plugin in Route

  curl -X PUT http://127.0.0.1:9180/apisix/admin/routes/secure-api -H "X-API-KEY: <admin-key>" -d '
{
  "uri": "/secure-api",
  "plugins": {
    "jwt-auth": {},
    "my_plugin": {}
  },
  "upstream": {
    "type": "roundrobin",
    "scheme": "https",
    "nodes": {
      "upstream.example.com:443": 1
    }
  }
}'


  
